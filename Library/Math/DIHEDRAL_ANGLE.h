#pragma once

#include <pybind11/pybind11.h>
#include <pybind11/eigen.h>

namespace py = pybind11;
namespace JGSL {

template <class T>
void Compute_Dihedral_Angle(
    const Eigen::Matrix<T, 3, 1>& v0,
    const Eigen::Matrix<T, 3, 1>& v1,
    const Eigen::Matrix<T, 3, 1>& v2,
    const Eigen::Matrix<T, 3, 1>& v3,
    T& DA)
{
    const Eigen::Matrix<T, 3, 1> n1 = (v1 - v0).cross(v2 - v0);
    const Eigen::Matrix<T, 3, 1> n2 = (v2 - v3).cross(v1 - v3);
    DA = std::acos(std::max(T(-1), std::min(T(1), 
      n1.dot(n2) / std::sqrt(n1.squaredNorm() * n2.squaredNorm()))));
    if (n2.cross(n1).dot(v1 - v2) < 0) {
      DA = -DA;
    }
}

template <class T>
void g_DA(T v01, T v02, T v03, T v11, T v12, T v13,
          T v21, T v22, T v23, T v31, T v32, T v33,
          T g[12])
{
  T t11;
  T t12;
  T t13;
  T t14;
  T t15;
  T t16;
  T t17;
  T t18;
  T t19;
  T t20;
  T t21;
  T t22;
  T t23;
  T t24;
  T t25;
  T t44;
  T t45;
  T t46;
  T t47;
  T t48;
  T t49;
  T t59;
  T t60;
  T t63;
  T t66;
  T t67;
  T t71;
  T g_tmp;
  T b_g_tmp;
  T c_g_tmp;
  T d_g_tmp;
  T e_g_tmp;
  T f_g_tmp;
  T g_g_tmp;
  T h_g_tmp;
  T i_g_tmp;
  T j_g_tmp;
  T k_g_tmp;

  /* G_DA */
  /*     G = G_DA(V01,V02,V03,V11,V12,V13,V21,V22,V23,V31,V32,V33) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.3. */
  /*     19-May-2020 20:57:04 */
  t11 = -v11 + v01;
  t12 = -v12 + v02;
  t13 = -v13 + v03;
  t14 = -v21 + v01;
  t15 = -v22 + v02;
  t16 = -v23 + v03;
  t17 = -v21 + v11;
  t18 = -v22 + v12;
  t19 = -v23 + v13;
  t20 = -v31 + v11;
  t21 = -v32 + v12;
  t22 = -v33 + v13;
  t23 = -v31 + v21;
  t24 = -v32 + v22;
  t25 = -v33 + v23;
  t44 = t11 * t15 + -(t12 * t14);
  t45 = t11 * t16 + -(t13 * t14);
  t46 = t12 * t16 + -(t13 * t15);
  t47 = t20 * t24 + -(t21 * t23);
  t48 = t20 * t25 + -(t22 * t23);
  t49 = t21 * t25 + -(t22 * t24);
  t59 = (t44 * t44 + t45 * t45) + t46 * t46;
  t60 = (t47 * t47 + t48 * t48) + t49 * t49;
  t63 = (t44 * t47 + t45 * t48) + t46 * t49;
  t66 = 1.0 / std::sqrt(t59 * t60);
  t67 = pow(t66, 3.0);
  T t71_denom2 = -(1.0 / t59 * (1.0 / t60) * (t63 * t63)) + 1.0;
  if (t71_denom2 <= 0) {
    for (int i = 0; i < 12; ++i) {
      g[i] = 0;
    }
    return;
  }
  t71 = 1.0 / std::sqrt(t71_denom2);
  g_tmp = t60 * t63 * t67;
  b_g_tmp = t18 * t44;
  c_g_tmp = t19 * t45;
  d_g_tmp = t18 * t47;
  e_g_tmp = t19 * t48;
  g[0] = t71 * (t66 * (d_g_tmp + e_g_tmp) - g_tmp * (b_g_tmp * 2.0 + c_g_tmp *
    2.0) / 2.0);
  f_g_tmp = t17 * t44;
  g_g_tmp = t19 * t46;
  h_g_tmp = t17 * t47;
  i_g_tmp = t19 * t49;
  g[1] = -t71 * (t66 * (h_g_tmp - i_g_tmp) - g_tmp * (f_g_tmp * 2.0 - g_g_tmp *
    2.0) / 2.0);
  j_g_tmp = t17 * t45;
  k_g_tmp = t18 * t46;
  t17 *= t48;
  t19 = t18 * t49;
  g[2] = -t71 * (t66 * (t17 + t19) - g_tmp * (j_g_tmp * 2.0 + k_g_tmp * 2.0) /
                 2.0);
  g_tmp = t63 * t67;
  g[3] = -t71 * (t66 * (((t15 * t47 + t16 * t48) - t24 * t44) - t25 * t45) -
                 g_tmp * (t60 * (t15 * t44 * 2.0 + t16 * t45 * 2.0) - t59 * (t24
    * t47 * 2.0 + t25 * t48 * 2.0)) / 2.0);
  g[4] = t71 * (t66 * (((t14 * t47 - t16 * t49) - t23 * t44) + t25 * t46) -
                g_tmp * (t60 * (t14 * t44 * 2.0 - t16 * t46 * 2.0) - t59 * (t23 *
    t47 * 2.0 - t25 * t49 * 2.0)) / 2.0);
  g[5] = t71 * (t66 * (((t14 * t48 + t15 * t49) - t23 * t45) - t24 * t46) -
                g_tmp * (t60 * (t14 * t45 * 2.0 + t15 * t46 * 2.0) - t59 * (t23 *
    t48 * 2.0 + t24 * t49 * 2.0)) / 2.0);
  g[6] = t71 * (t66 * (((t12 * t47 + t13 * t48) - t21 * t44) - t22 * t45) -
                g_tmp * (t60 * (t12 * t44 * 2.0 + t13 * t45 * 2.0) - t59 * (t21 *
    t47 * 2.0 + t22 * t48 * 2.0)) / 2.0);
  g[7] = -t71 * (t66 * (((t11 * t47 - t13 * t49) - t20 * t44) + t22 * t46) -
                 g_tmp * (t60 * (t11 * t44 * 2.0 - t13 * t46 * 2.0) - t59 * (t20
    * t47 * 2.0 - t22 * t49 * 2.0)) / 2.0);
  g[8] = -t71 * (t66 * (((t11 * t48 + t12 * t49) - t20 * t45) - t21 * t46) -
                 g_tmp * (t60 * (t11 * t45 * 2.0 + t12 * t46 * 2.0) - t59 * (t20
    * t48 * 2.0 + t21 * t49 * 2.0)) / 2.0);
  g_tmp = t59 * t63 * t67;
  g[9] = t71 * (t66 * (b_g_tmp + c_g_tmp) - g_tmp * (d_g_tmp * 2.0 + e_g_tmp *
    2.0) / 2.0);
  g[10] = -t71 * (t66 * (f_g_tmp - g_g_tmp) - g_tmp * (h_g_tmp * 2.0 - i_g_tmp *
    2.0) / 2.0);
  g[11] = -t71 * (t66 * (j_g_tmp + k_g_tmp) - g_tmp * (t17 * 2.0 + t19 * 2.0) /
                  2.0);
}

// template <class T>
// void Compute_Dihedral_Angle_Gradient(
//     const Eigen::Matrix<T, 3, 1>& v0,
//     const Eigen::Matrix<T, 3, 1>& v1,
//     const Eigen::Matrix<T, 3, 1>& v2,
//     const Eigen::Matrix<T, 3, 1>& v3,
//     Eigen::Matrix<T, 12, 1>& grad)
// {
//     g_DA(v0[0], v0[1], v0[2],
//         v1[0], v1[1], v1[2],
//         v2[0], v2[1], v2[2],
//         v3[0], v3[1], v3[2],
//         grad.data());
//     const Eigen::Matrix<T, 3, 1> n1 = (v1 - v0).cross(v2 - v0);
//     const Eigen::Matrix<T, 3, 1> n2 = (v2 - v3).cross(v1 - v3);
//     if (n2.cross(n1).dot(v1 - v2) < 0) {
//       grad = -grad;
//     }
// }

template <class T>
void Compute_Dihedral_Angle_Gradient(
    const Eigen::Matrix<T, 3, 1>& v2, // here we map our v order to rusmas' in this function for implementation convenience
    const Eigen::Matrix<T, 3, 1>& v0,
    const Eigen::Matrix<T, 3, 1>& v1,
    const Eigen::Matrix<T, 3, 1>& v3,
    Eigen::Matrix<T, 12, 1>& grad)
{
    Eigen::Matrix<T, 3, 1> e0 = v1 - v0;
    Eigen::Matrix<T, 3, 1> e1 = v2 - v0;
    Eigen::Matrix<T, 3, 1> e2 = v3 - v0;
    Eigen::Matrix<T, 3, 1> e3 = v2 - v1;
    Eigen::Matrix<T, 3, 1> e4 = v3 - v1;
    Eigen::Matrix<T, 3, 1> n1 = e0.cross(e1);
    Eigen::Matrix<T, 3, 1> n2 = e2.cross(e0);

    T n1SqNorm = n1.squaredNorm();
    T n2SqNorm = n2.squaredNorm();
    T e0norm = e0.norm();

    // fill in gradient in order with g2, g0, g1, g3 in rusmas' doc
    grad.template segment<3>(0) = -e0norm / n1SqNorm * n1;
    grad.template segment<3>(3) = -e0.dot(e3) / (e0norm * n1SqNorm) * n1 - e0.dot(e4) / (e0norm * n2SqNorm) * n2;
    grad.template segment<3>(6) = e0.dot(e1) / (e0norm * n1SqNorm) * n1 + e0.dot(e2) / (e0norm * n2SqNorm) * n2;
    grad.template segment<3>(9) = -e0norm / n2SqNorm * n2;
}

template <class T>
void H_DA(T v01, T v02, T v03, T v11, T v12, T v13,
          T v21, T v22, T v23, T v31, T v32, T v33,
          T H[144])
{
  T t11;
  T t12;
  T t13;
  T t14;
  T t15;
  T t16;
  T t17;
  T t18;
  T t19;
  T t20;
  T t21;
  T t22;
  T t23;
  T t24;
  T t25;
  T t32;
  T t33;
  T t34;
  T t56;
  T t57;
  T t58;
  T t59;
  T t60;
  T t61;
  T t62;
  T t63;
  T t64;
  T t65;
  T t66;
  T t67;
  T t68;
  T t69;
  T t70;
  T t71;
  T t74;
  T t75;
  T t78;
  T t79;
  T t80;
  T t83;
  T t84;
  T t85;
  T t93;
  T t96;
  T t102;
  T t103;
  T t104;
  T t107;
  T t108;
  T t111;
  T t112;
  T t113;
  T t116;
  T t117;
  T t118;
  T t119;
  T t120;
  T t121;
  T t122;
  T t123;
  T t124;
  T t125;
  T t126;
  T t127;
  T t128;
  T t129;
  T t130;
  T t131;
  T t132;
  T t133;
  T t134;
  T t140;
  T t148;
  T t158;
  T t162;
  T t168;
  T t170;
  T t174;
  T t180;
  T t191;
  T t197;
  T t205;
  T t41;
  T t42;
  T t43;
  T t44;
  T t45;
  T t46;
  T t47;
  T t48;
  T t49;
  T t50;
  T t51;
  T t52;
  T t53;
  T t54;
  T t55;
  T t135;
  T t136;
  T t138;
  T t141;
  T t143;
  T t145;
  T t149;
  T t153;
  T t157;
  T t159;
  T t164;
  T t169;
  T t171;
  T t176;
  T t181;
  T t182;
  T t186;
  T t190;
  T t192;
  T t193;
  T t195;
  T t198;
  T t200;
  T t202;
  T t239;
  T t240;
  T t241;
  T t260;
  T t262;
  T t264;
  T t278;
  T t280;
  T t282;
  T t302;
  T t306;
  T t308;
  T t331;
  T t333;
  T t334;
  T t335;
  T t336;
  T t337;
  T t448;
  T t449;
  T t450;
  T t451;
  T t452;
  T t453;
  T t454;
  T t455;
  T t462;
  T t463;
  T t464;
  T t465;
  T t478;
  T t479;
  T t640;
  T t456;
  T t457;
  T t458;
  T t459;
  T t460;
  T t461;
  T t466;
  T t467;
  T t470;
  T t471;
  T t480;
  T t481;
  T t482;
  T t484;
  T t550;
  T t551;
  T t552;
  T t553;
  T t554;
  T t555;
  T t641;
  T t468;
  T t469;
  T t485;
  T t643;
  T t644;
  T t645;
  T t740;
  T t741;
  T t742;
  T t743;
  T t750;
  T t751;
  T t755;
  T t1183;
  T t1185;
  T t1186;
  T t1187;
  T t1232;
  T t1233;
  T t1234;
  T t1235;
  T t1236;
  T t1237;
  T t756;
  T t1106_tmp;
  T t1107_tmp;
  T t1108_tmp;
  T t1109_tmp;
  T t1110_tmp;
  T t1224_tmp;
  T t1226;
  T t1230;
  T t1231;
  T t1509_tmp;
  T t1509;
  T t1510_tmp;
  T t1510;
  T t1511;
  T t1512_tmp;
  T t1512;
  T t1515;
  T t1516_tmp;
  T b_t1516_tmp;
  T c_t1516_tmp;
  T t1516_tmp_tmp;
  T d_t1516_tmp;
  T t1516;
  T t1517_tmp;
  T b_t1517_tmp;
  T c_t1517_tmp;
  T t1517;
  T t1524;
  T t1525;
  T t1533_tmp;
  T b_t1533_tmp;
  T t1533;
  T t1546_tmp;
  T b_t1546_tmp;
  T t1546;
  T t1501;
  T t1502_tmp;
  T t1502;
  T t1503;
  T t1504_tmp;
  T t1504;
  T t1505;
  T t1506;
  T t1507;
  T t1508;
  T t1513;
  T t1514;
  T t1518;
  T t1519;
  T t1520;
  T t1522;
  T t1523;
  T t1527;
  T t1529;
  T t1531;
  T t1532;
  T t1534;
  T t1535;
  T t1536;
  T t1537;
  T t1538;
  T t1540;
  T t1541;
  T t1542;

  /* H_DA */
  /*     H = H_DA(V01,V02,V03,V11,V12,V13,V21,V22,V23,V31,V32,V33) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.3. */
  /*     19-May-2020 20:58:25 */
  t11 = -v11 + v01;
  t12 = -v12 + v02;
  t13 = -v13 + v03;
  t14 = -v21 + v01;
  t15 = -v22 + v02;
  t16 = -v23 + v03;
  t17 = -v21 + v11;
  t18 = -v22 + v12;
  t19 = -v23 + v13;
  t20 = -v31 + v11;
  t21 = -v32 + v12;
  t22 = -v33 + v13;
  t23 = -v31 + v21;
  t24 = -v32 + v22;
  t25 = -v33 + v23;
  t32 = t17 * t17;
  t33 = t18 * t18;
  t34 = t19 * t19;
  t56 = t11 * t15;
  t57 = t12 * t14;
  t58 = t11 * t16;
  t59 = t13 * t14;
  t60 = t12 * t16;
  t61 = t13 * t15;
  t62 = t11 * t17;
  t63 = t11 * t18;
  t64 = t12 * t17;
  t65 = t11 * t19;
  t66 = t12 * t18;
  t67 = t13 * t17;
  t68 = t12 * t19;
  t69 = t13 * t18;
  t70 = t13 * t19;
  t71 = t14 * t17;
  t74 = t14 * t18;
  t75 = t15 * t17;
  t78 = t14 * t19;
  t79 = t15 * t18;
  t80 = t16 * t17;
  t83 = t15 * t19;
  t84 = t16 * t18;
  t85 = t16 * t19;
  t93 = t12 * t24;
  t96 = t15 * t21;
  t102 = t13 * t25;
  t103 = t16 * t22;
  t104 = t17 * t20;
  t107 = t17 * t21;
  t108 = t18 * t20;
  t111 = t17 * t22;
  t112 = t18 * t21;
  t113 = t19 * t20;
  t116 = t18 * t22;
  t117 = t19 * t21;
  t118 = t19 * t22;
  t119 = t17 * t23;
  t120 = t17 * t24;
  t121 = t18 * t23;
  t122 = t17 * t25;
  t123 = t18 * t24;
  t124 = t19 * t23;
  t125 = t18 * t25;
  t126 = t19 * t24;
  t127 = t19 * t25;
  t128 = t20 * t24;
  t129 = t21 * t23;
  t130 = t20 * t25;
  t131 = t22 * t23;
  t132 = t21 * t25;
  t133 = t22 * t24;
  t134 = t11 * t14 * 2.0;
  t140 = t12 * t15 * 2.0;
  t148 = t13 * t16 * 2.0;
  t158 = t11 * t20 * 2.0;
  t162 = t12 * t21 * 2.0;
  t168 = t13 * t22 * 2.0;
  t170 = t14 * t23 * 2.0;
  t174 = t15 * t24 * 2.0;
  t180 = t16 * t25 * 2.0;
  t191 = t20 * t23 * 2.0;
  t197 = t21 * t24 * 2.0;
  t205 = t22 * t25 * 2.0;
  t41 = t11 * t11 * 2.0;
  t42 = t12 * t12 * 2.0;
  t43 = t13 * t13 * 2.0;
  t44 = t14 * t14 * 2.0;
  t45 = t15 * t15 * 2.0;
  t46 = t16 * t16 * 2.0;
  t47 = t32 * 2.0;
  t48 = t33 * 2.0;
  t49 = t34 * 2.0;
  t50 = t20 * t20 * 2.0;
  t51 = t21 * t21 * 2.0;
  t52 = t22 * t22 * 2.0;
  t53 = t23 * t23 * 2.0;
  t54 = t24 * t24 * 2.0;
  t55 = t25 * t25 * 2.0;
  t135 = t56 * 2.0;
  t136 = t57 * 2.0;
  t138 = t58 * 2.0;
  t141 = t59 * 2.0;
  t143 = t60 * 2.0;
  t145 = t61 * 2.0;
  t149 = t62 * 2.0;
  t153 = t66 * 2.0;
  t157 = t70 * 2.0;
  t159 = t71 * 2.0;
  t164 = t79 * 2.0;
  t169 = t85 * 2.0;
  t171 = t104 * 2.0;
  t176 = t112 * 2.0;
  t181 = t118 * 2.0;
  t182 = t119 * 2.0;
  t186 = t123 * 2.0;
  t190 = t127 * 2.0;
  t192 = t128 * 2.0;
  t193 = t129 * 2.0;
  t195 = t130 * 2.0;
  t198 = t131 * 2.0;
  t200 = t132 * 2.0;
  t202 = t133 * 2.0;
  t239 = t47 + t48;
  t240 = t47 + t49;
  t241 = t48 + t49;
  t260 = t56 + -t57;
  t262 = t58 + -t59;
  t264 = t60 + -t61;
  t278 = t128 + -t129;
  t280 = t130 + -t131;
  t282 = t132 + -t133;
  t302 = t17 * t260;
  t47 = t18 * t260;
  t49 = t17 * t262;
  t48 = t19 * t262;
  t306 = t18 * t264;
  t308 = t19 * t264;
  t331 = t17 * t278;
  t333 = t18 * t278;
  t334 = t17 * t280;
  t335 = t19 * t280;
  t336 = t18 * t282;
  t337 = t19 * t282;
  t448 = t47 + t48;
  t449 = t49 + t306;
  t450 = t333 + t335;
  t451 = t334 + t336;
  t452 = t12 * t260 * 2.0 + t13 * t262 * 2.0;
  t453 = t11 * t262 * 2.0 + t12 * t264 * 2.0;
  t454 = t15 * t260 * 2.0 + t16 * t262 * 2.0;
  t455 = t14 * t262 * 2.0 + t15 * t264 * 2.0;
  t462 = t21 * t278 * 2.0 + t22 * t280 * 2.0;
  t463 = t20 * t280 * 2.0 + t21 * t282 * 2.0;
  t464 = t24 * t278 * 2.0 + t25 * t280 * 2.0;
  t465 = t23 * t280 * 2.0 + t24 * t282 * 2.0;
  t478 = (t260 * t260 + t262 * t262) + t264 * t264;
  t479 = (t278 * t278 + t280 * t280) + t282 * t282;
  t640 = (t260 * t278 + t262 * t280) + t264 * t282;
  t456 = t302 + -t308;
  t457 = t47 * 2.0 + t48 * 2.0;
  t458 = t49 * 2.0 + t306 * 2.0;
  t459 = t331 + -t337;
  t460 = t333 * 2.0 + t335 * 2.0;
  t461 = t334 * 2.0 + t336 * 2.0;
  t466 = t11 * t260 * 2.0 + -(t13 * t264 * 2.0);
  t467 = t14 * t260 * 2.0 + -(t16 * t264 * 2.0);
  t470 = t20 * t278 * 2.0 + -(t22 * t282 * 2.0);
  t471 = t23 * t278 * 2.0 + -(t25 * t282 * 2.0);
  t480 = t478 * t478;
  t481 = t479 * t479;
  t482 = 1.0 / t478;
  t484 = 1.0 / t479;
  t550 = ((t21 * t260 + t22 * t262) + -(t12 * t278)) + -(t13 * t280);
  t551 = ((t20 * t260 + t13 * t282) + -(t22 * t264)) + -(t11 * t278);
  t552 = ((t20 * t262 + t21 * t264) + -(t11 * t280)) + -(t12 * t282);
  t553 = ((t24 * t260 + t25 * t262) + -(t15 * t278)) + -(t16 * t280);
  t554 = ((t23 * t260 + t16 * t282) + -(t25 * t264)) + -(t14 * t278);
  t555 = ((t23 * t262 + t24 * t264) + -(t14 * t280)) + -(t15 * t282);
  t641 = t640 * t640;
  t468 = t302 * 2.0 + -(t308 * 2.0);
  t469 = t331 * 2.0 + -(t337 * 2.0);
  t48 = 1.0 / t480;
  t485 = 1.0 / t481;
  t49 = std::sqrt(t478 * t479);
  t643 = 1.0 / t49;
  t644 = pow(t643, 3.0);
  t645 = pow(t643, 5.0);
  t334 = t17 * t18;
  t308 = t334 * t643;
  t333 = t17 * t19;
  t302 = t333 * t643;
  t335 = t18 * t19;
  t306 = t335 * t643;
  t740 = t462 * t478 + -(t452 * t479);
  t741 = t463 * t478 + -(t453 * t479);
  t742 = t464 * t478 + -(t454 * t479);
  t743 = t465 * t478 + -(t455 * t479);
  t750 = t470 * t478 + -(t466 * t479);
  t751 = t471 * t478 + -(t467 * t479);
  t49 = t482 * t484;
  T t47sqr = -(t49 * t641) + 1.0;
  if (t47sqr <= 0) {
    for (int i = 0; i < 12 * 12; ++i) {
      H[i] = 0;
    }
    return;
  }
  t47 = std::sqrt(t47sqr);
  t755 = 1.0 / t47;
  t1183 = t448 * t482 * t484 * t640 * 2.0 + -(t460 * t482 * t485 * t641);
  t336 = t450 * t482 * t484 * t640 * 2.0 + -(t457 * t48 * t484 * t641);
  t1185 = t451 * t482 * t484 * t640 * 2.0 + -(t458 * t48 * t484 * t641);
  t1186 = t456 * t482 * t484 * t640 * 2.0 + -(t469 * t482 * t485 * t641);
  t1187 = t459 * t482 * t484 * t640 * 2.0 + -(t468 * t48 * t484 * t641);
  t1232 = (t452 * t48 * t484 * t641 + -(t462 * t482 * t485 * t641)) + t49 * t550
    * t640 * 2.0;
  t1233 = (t453 * t48 * t484 * t641 + -(t463 * t482 * t485 * t641)) + t49 * t552
    * t640 * 2.0;
  t1234 = (t454 * t48 * t484 * t641 + -(t464 * t482 * t485 * t641)) + t49 * t553
    * t640 * 2.0;
  t1235 = (t455 * t48 * t484 * t641 + -(t465 * t482 * t485 * t641)) + t49 * t555
    * t640 * 2.0;
  t1236 = (t466 * t48 * t484 * t641 + -(t470 * t482 * t485 * t641)) + t49 * t551
    * t640 * 2.0;
  t1237 = (t467 * t48 * t484 * t641 + -(t471 * t482 * t485 * t641)) + t49 * t554
    * t640 * 2.0;
  t756 = pow(t755, 3.0);
  t1106_tmp = t460 * t478;
  t331 = t1106_tmp * t640;
  t1107_tmp = t461 * t478;
  t337 = t1107_tmp * t640;
  t1108_tmp = t458 * t479;
  t48 = t1108_tmp * t640;
  t1109_tmp = t469 * t478;
  t47 = t1109_tmp * t640;
  t1110_tmp = t468 * t479;
  t49 = t1110_tmp * t640;
  t1224_tmp = t640 * t644;
  t19 = t550 * t643 + -(t1224_tmp * t740 / 2.0);
  t17 = t552 * t643 + -(t1224_tmp * t741 / 2.0);
  t1226 = t553 * t643 + -(t1224_tmp * t742 / 2.0);
  t18 = t555 * t643 + -(t1224_tmp * t743 / 2.0);
  t1230 = t551 * t643 + -(t1224_tmp * t750 / 2.0);
  t1231 = t554 * t643 + -(t1224_tmp * t751 / 2.0);
  t1509_tmp = t756 * (t448 * t643 + -(t331 * t644 / 2.0));
  t1509 = t1509_tmp * t336 / 2.0 + t755 * ((((t33 + t34) * t643 - t448 * t457 *
    t479 * t644 / 2.0) - t450 * t460 * t478 * t644 / 2.0) + t457 * t460 * t640 *
    t644 / 4.0);
  t1510_tmp = t756 * (t449 * t643 + -(t337 * t644 / 2.0));
  t1510 = t1510_tmp * t1185 / 2.0 + t755 * ((((t32 + t33) * t643 - t449 * t458 *
    t479 * t644 / 2.0) - t451 * t461 * t478 * t644 / 2.0) + t458 * t461 * t640 *
    t644 / 4.0);
  t1511 = t1510_tmp * t1187 / 2.0 + -(t755 * (((t306 + t449 * t468 * t479 * t644
    / 2.0) + t459 * t461 * t478 * t644 / 2.0) - t461 * t468 * t640 * t644 / 4.0));
  t1512_tmp = t756 * (t456 * t643 + -(t47 * t644 / 2.0));
  t1512 = t1512_tmp * t1185 / 2.0 + -(t755 * (((t306 + t451 * t469 * t478 * t644
    / 2.0) + t456 * t458 * t479 * t644 / 2.0) - t458 * t469 * t640 * t644 / 4.0));
  t1515 = t1512_tmp * t1187 / 2.0 + t755 * ((((t32 + t34) * t643 - t456 * t468 *
    t479 * t644 / 2.0) - t459 * t469 * t478 * t644 / 2.0) + t468 * t469 * t640 *
    t644 / 4.0);
  t1516_tmp = t457 * t479;
  b_t1516_tmp = t756 * t336;
  c_t1516_tmp = t450 * t644;
  t1516_tmp_tmp = t1516_tmp * t640;
  d_t1516_tmp = t1516_tmp_tmp * t645;
  t1516 = b_t1516_tmp * t1226 / 2.0 + t755 * (((((t123 + t127) * t643 +
    -(t1516_tmp * t553 * t644 / 2.0)) + -(c_t1516_tmp * t742 / 2.0)) + t1224_tmp
    * ((t164 + t169) * t479 + -(t457 * t464)) / 2.0) + d_t1516_tmp * t742 * 0.75);
  t1517_tmp = t756 * t1185;
  b_t1517_tmp = t451 * t644;
  c_t1517_tmp = t48 * t645;
  t1517 = t1517_tmp * t18 / 2.0 + t755 * (((((t119 + t123) * t643 + -(t1108_tmp *
    t555 * t644 / 2.0)) + -(b_t1517_tmp * t743 / 2.0)) + t1224_tmp * ((t159 +
    t164) * t479 + -(t458 * t465)) / 2.0) + c_t1517_tmp * t743 * 0.75);
  t1524 = t1517_tmp * t19 / 2.0 + t755 * (((((t111 + t280) * t643 - t1108_tmp *
    t550 * t644 / 2.0) - b_t1517_tmp * t740 / 2.0) + c_t1517_tmp * t740 * 0.75)
    + t1224_tmp * (((t141 + t67 * 2.0) + -t138) * t479 - t458 * t462) / 2.0);
  t1525 = b_t1516_tmp * t17 / 2.0 + t755 * ((((((t113 + t131) + -t130) * t643 -
    t1516_tmp * t552 * t644 / 2.0) - c_t1516_tmp * t741 / 2.0) + d_t1516_tmp *
    t741 * 0.75) + t1224_tmp * (((t138 + t65 * 2.0) + -t141) * t479 - t457 *
    t463) / 2.0);
  t33 = t756 * t1187;
  t1533_tmp = t459 * t644;
  b_t1533_tmp = t49 * t645;
  t1533 = t33 * t19 / 2.0 + t755 * (((((t107 + t278) * t643 - t1110_tmp * t550 *
    t644 / 2.0) - t1533_tmp * t740 / 2.0) + b_t1533_tmp * t740 * 0.75) +
    t1224_tmp * (((t136 + t64 * 2.0) + -t135) * t479 - t462 * t468) / 2.0);
  t1546_tmp = t456 * t644;
  b_t1546_tmp = t47 * t645;
  t1546 = t1512_tmp * t1235 / 2.0 + t755 * ((((((t83 + t264) * t643 + ((t126 *
    2.0 + t202) + -t200) * t478 * t640 * t644 / 2.0) + -(t1109_tmp * t555 * t644
    / 2.0)) + t455 * t469 * t640 * t644 / 2.0) + -(t1546_tmp * t743 / 2.0)) +
    b_t1546_tmp * t743 * 0.75);
  t1501 = -(t1510_tmp * t1183 / 2.0) + t755 * (((t448 * t461 * t478 * t644 / 2.0
    + t449 * t460 * t478 * t644 / 2.0) + t333 * t478 * t640 * t644) + -(t460 *
    t461 * t480 * t640 * t645 * 0.75));
  t1502_tmp = t756 * (t451 * t643 + -(t48 * t644 / 2.0));
  t1502 = -(t1502_tmp * t336 / 2.0) + t755 * (((t451 * t457 * t479 * t644 / 2.0
    + t450 * t458 * t479 * t644 / 2.0) + t333 * t479 * t640 * t644) + -(t457 *
    t458 * t481 * t640 * t645 * 0.75));
  t1503 = -(t1512_tmp * t1183 / 2.0) + t755 * (((t448 * t469 * t478 * t644 / 2.0
    + t456 * t460 * t478 * t644 / 2.0) + t334 * t478 * t640 * t644) + -(t460 *
    t469 * t480 * t640 * t645 * 0.75));
  t1504_tmp = t756 * (t459 * t643 + -(t49 * t644 / 2.0));
  t1504 = -(t1504_tmp * t336 / 2.0) + t755 * (((t450 * t468 * t479 * t644 / 2.0
    + t457 * t459 * t479 * t644 / 2.0) + t334 * t479 * t640 * t644) + -(t457 *
    t468 * t481 * t640 * t645 * 0.75));
  t1505 = t1510_tmp * t1186 / 2.0 + -(t755 * (((t449 * t469 * t478 * t644 / 2.0
    + t456 * t461 * t478 * t644 / 2.0) + -(t335 * t478 * t640 * t644)) + -(t461 *
    t469 * t480 * t640 * t645 * 0.75)));
  t1506 = t1502_tmp * t1187 / 2.0 + -(t755 * (((t451 * t468 * t479 * t644 / 2.0
    + t458 * t459 * t479 * t644 / 2.0) + -(t335 * t479 * t640 * t644)) + -(t458 *
    t468 * t481 * t640 * t645 * 0.75)));
  t1507 = -(t1510_tmp * t336 / 2.0) + -t755 * (((t302 - t449 * t457 * t479 *
    t644 / 2.0) - t450 * t461 * t478 * t644 / 2.0) + t457 * t461 * t640 * t644 /
    4.0);
  t1508 = -(t1509_tmp * t1185 / 2.0) + -t755 * (((t302 - t448 * t458 * t479 *
    t644 / 2.0) - t451 * t460 * t478 * t644 / 2.0) + t458 * t460 * t640 * t644 /
    4.0);
  t1513 = -(t1512_tmp * t336 / 2.0) + -t755 * (((t308 - t450 * t469 * t478 *
    t644 / 2.0) - t456 * t457 * t479 * t644 / 2.0) + t457 * t469 * t640 * t644 /
    4.0);
  t1514 = -(t1509_tmp * t1187 / 2.0) + -t755 * (((t308 - t448 * t468 * t479 *
    t644 / 2.0) - t459 * t460 * t478 * t644 / 2.0) + t460 * t468 * t640 * t644 /
    4.0);
  t1518 = -(b_t1516_tmp * t19 / 2.0) + -(t755 * (((((t112 + t118) * t643 +
    -(t1516_tmp * t550 * t644 / 2.0)) + -(c_t1516_tmp * t740 / 2.0)) + t1224_tmp
    * ((t153 + t157) * t479 + -(t457 * t462)) / 2.0) + d_t1516_tmp * t740 * 0.75));
  t1519 = -(t1517_tmp * t17 / 2.0) + -(t755 * (((((t104 + t112) * t643 +
    -(t1108_tmp * t552 * t644 / 2.0)) + -(b_t1517_tmp * t741 / 2.0)) + t1224_tmp
    * ((t149 + t153) * t479 + -(t458 * t463)) / 2.0) + c_t1517_tmp * t741 * 0.75));
  t1520 = t33 * t1231 / 2.0 + t755 * (((((t119 + t127) * t643 + -(t1110_tmp *
    t554 * t644 / 2.0)) + -(t1533_tmp * t751 / 2.0)) + t1224_tmp * ((t159 + t169)
    * t479 + -(t468 * t471)) / 2.0) + b_t1533_tmp * t751 * 0.75);
  t1522 = -(t1517_tmp * t1226 / 2.0) + -t755 * (((((t122 + t280) * t643 -
    t1108_tmp * t553 * t644 / 2.0) - b_t1517_tmp * t742 / 2.0) + c_t1517_tmp *
    t742 * 0.75) + t1224_tmp * (((t141 + t80 * 2.0) + -t138) * t479 - t458 *
    t464) / 2.0);
  t1523 = -(b_t1516_tmp * t18 / 2.0) + -t755 * ((((((t124 + t131) + -t130) *
    t643 - t1516_tmp * t555 * t644 / 2.0) - c_t1516_tmp * t743 / 2.0) +
    d_t1516_tmp * t743 * 0.75) + t1224_tmp * (((t138 + t78 * 2.0) + -t141) *
    t479 - t457 * t465) / 2.0);
  t1527 = -(t33 * t17 / 2.0) + t755 * ((((((t117 + t133) + -t132) * t643 +
    t1110_tmp * t552 * t644 / 2.0) + t1533_tmp * t741 / 2.0) + t1224_tmp *
    (((t143 + t68 * 2.0) + -t145) * t479 + t463 * t468) / 2.0) + -(b_t1533_tmp *
    t741 * 0.75));
  t1529 = t33 * t18 / 2.0 + -(t755 * ((((((t126 + t133) + -t132) * t643 +
    t1110_tmp * t555 * t644 / 2.0) + t1533_tmp * t743 / 2.0) + t1224_tmp *
    (((t143 + t83 * 2.0) + -t145) * t479 + t465 * t468) / 2.0) + -(b_t1533_tmp *
    t743 * 0.75)));
  t1531 = b_t1516_tmp * t1230 / 2.0 + t755 * ((((((t108 + t129) + -t128) * t643
    - t1516_tmp * t551 * t644 / 2.0) - c_t1516_tmp * t750 / 2.0) + d_t1516_tmp *
    t750 * 0.75) + t1224_tmp * (((t135 + t63 * 2.0) + -t136) * t479 - t457 *
    t470) / 2.0);
  t1532 = -(t33 * t1226 / 2.0) + -t755 * (((((t120 + t278) * t643 - t1110_tmp *
    t553 * t644 / 2.0) - t1533_tmp * t742 / 2.0) + b_t1533_tmp * t742 * 0.75) +
    t1224_tmp * (((t136 + t75 * 2.0) + -t135) * t479 - t464 * t468) / 2.0);
  t335 = t448 * t644;
  t306 = t331 * t645;
  t1534 = -(t1509_tmp * t1232 / 2.0) + t755 * ((((((t66 + t70) * t643 + (t176 +
    t181) * t478 * t640 * t644 / 2.0) + t1106_tmp * t550 * t644 / 2.0) + -(t452 *
    t460 * t640 * t644 / 2.0)) + t335 * t740 / 2.0) + -(t306 * t740 * 0.75));
  t334 = t449 * t644;
  t333 = t337 * t645;
  t1535 = -(t1510_tmp * t1233 / 2.0) + t755 * ((((((t62 + t66) * t643 + (t171 +
    t176) * t478 * t640 * t644 / 2.0) + t1107_tmp * t552 * t644 / 2.0) + -(t453 *
    t461 * t640 * t644 / 2.0)) + t334 * t741 / 2.0) + -(t333 * t741 * 0.75));
  t1536 = t1509_tmp * t1234 / 2.0 + -(t755 * ((((((t79 + t85) * t643 + (t186 +
    t190) * t478 * t640 * t644 / 2.0) + t1106_tmp * t553 * t644 / 2.0) + -(t454 *
    t460 * t640 * t644 / 2.0)) + t335 * t742 / 2.0) + -(t306 * t742 * 0.75)));
  t1537 = t1510_tmp * t1235 / 2.0 + -(t755 * ((((((t71 + t79) * t643 + (t182 +
    t186) * t478 * t640 * t644 / 2.0) + t1107_tmp * t555 * t644 / 2.0) + -(t455 *
    t461 * t640 * t644 / 2.0)) + t334 * t743 / 2.0) + -(t333 * t743 * 0.75)));
  t1538 = -(t1512_tmp * t1236 / 2.0) + t755 * ((((((t62 + t70) * t643 + (t171 +
    t181) * t478 * t640 * t644 / 2.0) + t1109_tmp * t551 * t644 / 2.0) + -(t466 *
    t469 * t640 * t644 / 2.0)) + t1546_tmp * t750 / 2.0) + -(b_t1546_tmp * t750 *
    0.75));
  t1540 = -(t1510_tmp * t1234 / 2.0) + t755 * (((((((t59 + t80) + -t58) * t643 +
    ((t122 * 2.0 + t195) + -t198) * t478 * t640 * t644 / 2.0) + t1107_tmp * t553
    * t644 / 2.0) + -(t454 * t461 * t640 * t644 / 2.0)) + t334 * t742 / 2.0) +
    -(t333 * t742 * 0.75));
  t1541 = -(t1509_tmp * t1235 / 2.0) + t755 * ((((((t78 + t262) * t643 + ((t124 *
    2.0 + t198) + -t195) * t478 * t640 * t644 / 2.0) + t1106_tmp * t555 * t644 /
    2.0) + -(t455 * t460 * t640 * t644 / 2.0)) + t335 * t743 / 2.0) + -(t306 *
    t743 * 0.75));
  t1542 = t1510_tmp * t1232 / 2.0 + -(t755 * (((((((t59 + t67) + -t58) * t643 +
    ((t111 * 2.0 + t195) + -t198) * t478 * t640 * t644 / 2.0) + t1107_tmp * t550
    * t644 / 2.0) + -(t452 * t461 * t640 * t644 / 2.0)) + t334 * t740 / 2.0) +
    -(t333 * t740 * 0.75)));
  t124 = t1509_tmp * t1233 / 2.0 + -(t755 * ((((((t65 + t262) * t643 + ((t113 *
    2.0 + t198) + -t195) * t478 * t640 * t644 / 2.0) + t1106_tmp * t552 * t644 /
    2.0) + -(t453 * t460 * t640 * t644 / 2.0)) + t335 * t741 / 2.0) + -(t306 *
    t741 * 0.75)));
  t67 = t1510_tmp * t1237 / 2.0 + t755 * (((((((t61 + t84) + -t60) * t643 +
    ((t125 * 2.0 + t200) + -t202) * t478 * t640 * t644 / 2.0) + -(t1107_tmp *
    t554 * t644 / 2.0)) + t461 * t467 * t640 * t644 / 2.0) + -(t334 * t751 / 2.0))
    + t333 * t751 * 0.75);
  t111 = -(t1509_tmp * t1237 / 2.0) + t755 * ((((((t74 + t260) * t643 + ((t121 *
    2.0 + t193) + -t192) * t478 * t640 * t644 / 2.0) + t1106_tmp * t554 * t644 /
    2.0) + -(t460 * t467 * t640 * t644 / 2.0)) + t335 * t751 / 2.0) + -(t306 *
    t751 * 0.75));
  t78 = -(t1512_tmp * t1234 / 2.0) + t755 * (((((((t57 + t75) + -t56) * t643 +
    ((t120 * 2.0 + t192) + -t193) * t478 * t640 * t644 / 2.0) + t1109_tmp * t553
    * t644 / 2.0) + -(t454 * t469 * t640 * t644 / 2.0)) + t1546_tmp * t742 / 2.0)
    + -(b_t1546_tmp * t742 * 0.75));
  t122 = t1512_tmp * t1232 / 2.0 + -(t755 * (((((((t57 + t64) + -t56) * t643 +
    ((t107 * 2.0 + t192) + -t193) * t478 * t640 * t644 / 2.0) + t1109_tmp * t550
    * t644 / 2.0) + -(t452 * t469 * t640 * t644 / 2.0)) + t1546_tmp * t740 / 2.0)
    + -(b_t1546_tmp * t740 * 0.75)));
  t181 = -(t1512_tmp * t1233 / 2.0) + -(t755 * ((((((t68 + t264) * t643 + ((t117
    * 2.0 + t202) + -t200) * t478 * t640 * t644 / 2.0) + -(t1109_tmp * t552 *
    t644 / 2.0)) + t453 * t469 * t640 * t644 / 2.0) + -(t1546_tmp * t741 / 2.0))
    + b_t1546_tmp * t741 * 0.75));
  t80 = t640 * t645;
  t171 = t756 * t17;
  t70 = t552 * t644;
  t186 = t550 * t644;
  t49 = t80 * t740;
  t62 = -(t171 * t1232 / 2.0) + t755 * (((((t11 * t22 + t13 * t20) * t643 + t70 *
    t740 / 2.0) + t186 * t741 / 2.0) + t1224_tmp * (((t20 * t22 * t478 * 2.0 +
    t11 * t13 * t479 * 2.0) - t452 * t463) - t453 * t462) / 2.0) + -(t49 * t741 *
    0.75));
  t79 = t756 * t18;
  t176 = t555 * t644;
  t127 = t553 * t644;
  t164 = t80 * t742;
  t159 = -(t79 * t1234 / 2.0) + t755 * (((((t14 * t25 + t16 * t23) * t643 + t176
    * t742 / 2.0) + t127 * t743 / 2.0) + t1224_tmp * (((t23 * t25 * t478 * 2.0 +
    t14 * t16 * t479 * 2.0) - t454 * t465) - t455 * t464) / 2.0) + -(t164 * t743
    * 0.75));
  t48 = t80 * t741;
  t169 = t551 * t644;
  t83 = t171 * t1236 / 2.0 + t755 * (((((t12 * t22 + t13 * t21) * t643 + -(t169 *
    t741 / 2.0)) + -(t70 * t750 / 2.0)) + t1224_tmp * (((t21 * t22 * t478 * 2.0
    + t12 * t13 * t479 * 2.0) + t463 * t466) + t453 * t470) / 2.0) + t48 * t750 *
    0.75);
  t126 = t554 * t644;
  t112 = t80 * t743;
  t66 = t79 * t1237 / 2.0 + t755 * (((((t15 * t25 + t16 * t24) * t643 + -(t126 *
    t743 / 2.0)) + -(t176 * t751 / 2.0)) + t1224_tmp * (((t24 * t25 * t478 * 2.0
    + t15 * t16 * t479 * 2.0) + t465 * t467) + t455 * t471) / 2.0) + t112 * t751
    * 0.75);
  t153 = t756 * t19;
  t119 = -(t153 * t1234 / 2.0) + t755 * (((((((t93 + t96) + t102) + t103) * t643
    + t127 * t740 / 2.0) + t186 * t742 / 2.0) + t1224_tmp * ((((t197 + t205) *
    t478 + (t140 + t148) * t479) + -(t452 * t464)) + -(t454 * t462)) / 2.0) +
    -(t49 * t742 * 0.75));
  t47 = t11 * t23 + t14 * t20;
  t123 = -(t171 * t1235 / 2.0) + t755 * ((((((t47 + t93) + t96) * t643 + t176 *
    t741 / 2.0) + t70 * t743 / 2.0) + t1224_tmp * ((((t191 + t197) * t478 +
    (t134 + t140) * t479) + -(t453 * t465)) + -(t455 * t463)) / 2.0) + -(t48 *
    t743 * 0.75));
  t34 = t153 * t1235 / 2.0 + -(t755 * (((((((t13 * t23 + t14 * t22) + t262) +
    t280) * t643 + t176 * t740 / 2.0) + t186 * t743 / 2.0) + -(t1224_tmp *
    ((((t195 + -(t131 * 4.0)) * t478 + (t138 + -(t59 * 4.0)) * t479) + t452 *
      t465) + t455 * t462) / 2.0)) + -(t49 * t743 * 0.75)));
  t32 = t171 * t1234 / 2.0 + -(t755 * (((((((((t59 + t11 * t25) + t16 * t20) +
    t131) + -t58) + -t130) * t643 + t127 * t741 / 2.0) + t70 * t742 / 2.0) +
    t1224_tmp * (((t453 * t464 + t454 * t463) + t479 * (t141 - t58 * 4.0)) +
                 t478 * (t198 - t130 * 4.0)) * -0.5) + -(t48 * t742 * 0.75)));
  t19 = -(t33 * t1230 / 2.0) + -(t755 * (((((t104 + t118) * t643 + -(t1110_tmp *
    t551 * t644 / 2.0)) + -(t1533_tmp * t750 / 2.0)) + t1224_tmp * ((t149 + t157)
    * t479 + -(t468 * t470)) / 2.0) + b_t1533_tmp * t750 * 0.75));
  t33 = -(t1517_tmp * t1230 / 2.0) + t755 * (((((t116 + t282) * t643 + t1108_tmp
    * t551 * t644 / 2.0) + b_t1517_tmp * t750 / 2.0) + t1224_tmp * (((t145 + t69
    * 2.0) + -t143) * t479 + t458 * t470) / 2.0) + -(c_t1517_tmp * t750 * 0.75));
  t18 = t1517_tmp * t1231 / 2.0 + -(t755 * (((((t125 + t282) * t643 + t1108_tmp *
    t554 * t644 / 2.0) + b_t1517_tmp * t751 / 2.0) + t1224_tmp * (((t145 + t84 *
    2.0) + -t143) * t479 + t458 * t471) / 2.0) + -(c_t1517_tmp * t751 * 0.75)));
  t17 = -(b_t1516_tmp * t1231 / 2.0) + -t755 * ((((((t121 + t129) + -t128) *
    t643 - t1516_tmp * t554 * t644 / 2.0) - c_t1516_tmp * t751 / 2.0) +
    d_t1516_tmp * t751 * 0.75) + t1224_tmp * (((t135 + t74 * 2.0) + -t136) *
    t479 - t457 * t471) / 2.0);
  t337 = t1512_tmp * t1237 / 2.0 + -(t755 * ((((((t71 + t85) * t643 + (t182 +
    t190) * t478 * t640 * t644 / 2.0) + t1109_tmp * t554 * t644 / 2.0) + -(t467 *
    t469 * t640 * t644 / 2.0)) + t1546_tmp * t751 / 2.0) + -(b_t1546_tmp * t751 *
    0.75)));
  t331 = t1509_tmp * t1236 / 2.0 + -(t755 * ((((((t63 + t260) * t643 + ((t108 *
    2.0 + t193) + -t192) * t478 * t640 * t644 / 2.0) + t1106_tmp * t551 * t644 /
    2.0) + -(t460 * t466 * t640 * t644 / 2.0)) + t335 * t750 / 2.0) + -(t306 *
    t750 * 0.75)));
  t308 = -(t1510_tmp * t1236 / 2.0) + -(t755 * (((((((t61 + t69) + -t60) * t643
    + ((t116 * 2.0 + t200) + -t202) * t478 * t640 * t644 / 2.0) + -(t1107_tmp *
    t551 * t644 / 2.0)) + t461 * t466 * t640 * t644 / 2.0) + -(t334 * t750 / 2.0))
    + t333 * t750 * 0.75));
  t336 = t756 * t1230;
  t302 = -(t336 * t1232 / 2.0) + t755 * (((((t11 * t21 + t12 * t20) * t643 +
    t169 * t740 / 2.0) + t186 * t750 / 2.0) + t1224_tmp * (((t20 * t21 * t478 *
    2.0 + t11 * t12 * t479 * 2.0) - t452 * t470) - t462 * t466) / 2.0) + -(t49 *
    t750 * 0.75));
  t335 = t756 * t1231;
  t334 = -(t335 * t1234 / 2.0) + t755 * (((((t14 * t24 + t15 * t23) * t643 +
    t126 * t742 / 2.0) + t127 * t751 / 2.0) + t1224_tmp * (((t23 * t24 * t478 *
    2.0 + t14 * t15 * t479 * 2.0) - t454 * t471) - t464 * t467) / 2.0) + -(t164 *
    t751 * 0.75));
  t333 = -(t336 * t1237 / 2.0) + t755 * ((((((t47 + t102) + t103) * t643 + t126 *
    t750 / 2.0) + t169 * t751 / 2.0) + t1224_tmp * ((((t191 + t205) * t478 +
    (t134 + t148) * t479) + -(t466 * t471)) + -(t467 * t470)) / 2.0) + -(t80 *
    t750 * t751 * 0.75));
  t306 = t153 * t1237 / 2.0 + -(t755 * (((((((t12 * t23 + t14 * t21) + t260) +
    t278) * t643 + t126 * t740 / 2.0) + t186 * t751 / 2.0) + -(t1224_tmp *
    ((((t192 + -(t129 * 4.0)) * t478 + (t135 + -(t57 * 4.0)) * t479) + t452 *
      t471) + t462 * t467) / 2.0)) + -(t49 * t751 * 0.75)));
  t49 = -(t171 * t1237 / 2.0) + -(t755 * (((((((((t61 + t12 * t25) + t16 * t21)
    + t133) + -t60) + -t132) * t643 + -(t126 * t741 / 2.0)) + -(t70 * t751 / 2.0))
    + t1224_tmp * (((-t478 * (t202 - t132 * 4.0) + -t479 * (t145 - t60 * 4.0)) +
                    t453 * t471) + t463 * t467) / 2.0) + t48 * t751 * 0.75));
  t48 = t336 * t1234 / 2.0 + -(t755 * (((((((((t57 + t11 * t24) + t15 * t20) +
    t129) + -t56) + -t128) * t643 + t169 * t742 / 2.0) + t127 * t750 / 2.0) +
    t1224_tmp * (((t464 * t466 + t454 * t470) + t479 * (t136 - t56 * 4.0)) +
                 t478 * (t193 - t128 * 4.0)) * -0.5) + -(t164 * t750 * 0.75)));
  t47 = -(t336 * t1235 / 2.0) + t755 * ((((-((((t13 * t24 + t15 * t22) + t264) +
    t282) * t643) + t169 * t743 / 2.0) + t176 * t750 / 2.0) + t1224_tmp *
    ((((t200 + -(t133 * 4.0)) * t478 + (t143 + -(t61 * 4.0)) * t479) + -(t465 *
    t466)) + -(t455 * t470)) / 2.0) + -(t112 * t750 * 0.75));
  H[0] = -t755 * ((t241 * t479 * t640 * t644 / 2.0 + t450 * t457 * t479 * t644)
                  - t457 * t457 * t481 * t640 * t645 * 0.75) + b_t1516_tmp *
    (t450 * t643 - t1516_tmp_tmp * t644 / 2.0) / 2.0;
  H[1] = t1504;
  H[2] = t1502;
  H[3] = t1516;
  H[4] = t17;
  H[5] = t1523;
  H[6] = t1518;
  H[7] = t1531;
  H[8] = t1525;
  H[9] = t1509;
  H[10] = t1513;
  H[11] = t1507;
  H[12] = t1504;
  H[13] = -t755 * ((t240 * t479 * t640 * t644 / 2.0 + t459 * t468 * t479 * t644)
                   - t468 * t468 * t481 * t640 * t645 * 0.75) + t1504_tmp *
    t1187 / 2.0;
  H[14] = t1506;
  H[15] = t1532;
  H[16] = t1520;
  H[17] = t1529;
  H[18] = t1533;
  H[19] = t19;
  H[20] = t1527;
  H[21] = t1514;
  H[22] = t1515;
  H[23] = t1511;
  H[24] = t1502;
  H[25] = t1506;
  H[26] = -t755 * ((t239 * t479 * t640 * t644 / 2.0 + t451 * t458 * t479 * t644)
                   - t458 * t458 * t481 * t640 * t645 * 0.75) + t1502_tmp *
    t1185 / 2.0;
  H[27] = t1522;
  H[28] = t18;
  H[29] = t1517;
  H[30] = t1524;
  H[31] = t33;
  H[32] = t1519;
  H[33] = t1508;
  H[34] = t1512;
  H[35] = t1510;
  H[36] = t1516;
  H[37] = t1532;
  H[38] = t1522;
  H[39] = -t755 * (((t643 * (t174 + t180) - t80 * (t742 * t742) * 0.75) +
                    t1224_tmp * ((t479 * (t45 + t46) + t478 * (t54 + t55)) -
    t454 * t464 * 2.0) / 2.0) + t127 * t742) + t756 * t1226 * t1234 / 2.0;
  H[40] = t334;
  H[41] = t159;
  H[42] = t119;
  H[43] = t48;
  H[44] = t32;
  H[45] = t1536;
  H[46] = t78;
  H[47] = t1540;
  H[48] = t17;
  H[49] = t1520;
  H[50] = t18;
  H[51] = t334;
  H[52] = -t755 * (((t643 * (t170 + t180) - t80 * (t751 * t751) * 0.75) +
                    t1224_tmp * ((t479 * (t44 + t46) + t478 * (t53 + t55)) -
    t467 * t471 * 2.0) / 2.0) + t126 * t751) + t335 * t1237 / 2.0;
  H[53] = t66;
  H[54] = t306;
  H[55] = t333;
  H[56] = t49;
  H[57] = t111;
  H[58] = t337;
  H[59] = t67;
  H[60] = t1523;
  H[61] = t1529;
  H[62] = t1517;
  H[63] = t159;
  H[64] = t66;
  H[65] = -t755 * (((t643 * (t170 + t174) - t80 * (t743 * t743) * 0.75) +
                    t1224_tmp * ((t479 * (t44 + t45) + t478 * (t53 + t54)) -
    t455 * t465 * 2.0) / 2.0) + t176 * t743) + t79 * t1235 / 2.0;
  H[66] = t34;
  H[67] = t47;
  H[68] = t123;
  H[69] = t1541;
  H[70] = t1546;
  H[71] = t1537;
  H[72] = t1518;
  H[73] = t1533;
  H[74] = t1524;
  H[75] = t119;
  H[76] = t306;
  H[77] = t34;
  H[78] = -t755 * (((t643 * (t162 + t168) - t80 * (t740 * t740) * 0.75) +
                    t1224_tmp * ((t479 * (t42 + t43) + t478 * (t51 + t52)) -
    t452 * t462 * 2.0) / 2.0) + t186 * t740) + t153 * t1232 / 2.0;
  H[79] = t302;
  H[80] = t62;
  H[81] = t1534;
  H[82] = t122;
  H[83] = t1542;
  H[84] = t1531;
  H[85] = t19;
  H[86] = t33;
  H[87] = t48;
  H[88] = t333;
  H[89] = t47;
  H[90] = t302;
  H[91] = -t755 * (((t643 * (t158 + t168) - t80 * (t750 * t750) * 0.75) +
                    t1224_tmp * ((t479 * (t41 + t43) + t478 * (t50 + t52)) -
    t466 * t470 * 2.0) / 2.0) + t169 * t750) + t336 * t1236 / 2.0;
  H[92] = t83;
  H[93] = t331;
  H[94] = t1538;
  H[95] = t308;
  H[96] = t1525;
  H[97] = t1527;
  H[98] = t1519;
  H[99] = t32;
  H[100] = t49;
  H[101] = t123;
  H[102] = t62;
  H[103] = t83;
  H[104] = -t755 * (((t643 * (t158 + t162) - t80 * (t741 * t741) * 0.75) +
                     t1224_tmp * ((t479 * (t41 + t42) + t478 * (t50 + t51)) -
    t453 * t463 * 2.0) / 2.0) + t70 * t741) + t171 * t1233 / 2.0;
  H[105] = t124;
  H[106] = t181;
  H[107] = t1535;
  H[108] = t1509;
  H[109] = t1514;
  H[110] = t1508;
  H[111] = t1536;
  H[112] = t111;
  H[113] = t1541;
  H[114] = t1534;
  H[115] = t331;
  H[116] = t124;
  H[117] = -t755 * ((t241 * t478 * t640 * t644 / 2.0 + t448 * t460 * t478 * t644)
                    - t460 * t460 * t480 * t640 * t645 * 0.75) + t1509_tmp *
    t1183 / 2.0;
  H[118] = t1503;
  H[119] = t1501;
  H[120] = t1513;
  H[121] = t1515;
  H[122] = t1512;
  H[123] = t78;
  H[124] = t337;
  H[125] = t1546;
  H[126] = t122;
  H[127] = t1538;
  H[128] = t181;
  H[129] = t1503;
  H[130] = -t755 * ((t240 * t478 * t640 * t644 / 2.0 + t456 * t469 * t478 * t644)
                    - t469 * t469 * t480 * t640 * t645 * 0.75) + t1512_tmp *
    t1186 / 2.0;
  H[131] = t1505;
  H[132] = t1507;
  H[133] = t1511;
  H[134] = t1510;
  H[135] = t1540;
  H[136] = t67;
  H[137] = t1537;
  H[138] = t1542;
  H[139] = t308;
  H[140] = t1535;
  H[141] = t1501;
  H[142] = t1505;
  H[143] = -t755 * ((t239 * t478 * t640 * t644 / 2.0 + t449 * t461 * t478 * t644)
                    - t461 * t461 * t480 * t640 * t645 * 0.75) + t1510_tmp *
    (t449 * t482 * t484 * t640 * 2.0 - t461 * t482 * t485 * t641) / 2.0;
}

// template <class T>
// void Compute_Dihedral_Angle_Hessian(
//     const Eigen::Matrix<T, 3, 1>& v0,
//     const Eigen::Matrix<T, 3, 1>& v1,
//     const Eigen::Matrix<T, 3, 1>& v2,
//     const Eigen::Matrix<T, 3, 1>& v3,
//     Eigen::Matrix<T, 12, 12>& Hess)
// {
//     H_DA(v0[0], v0[1], v0[2],
//         v1[0], v1[1], v1[2],
//         v2[0], v2[1], v2[2],
//         v3[0], v3[1], v3[2],
//         Hess.data());
//     const Eigen::Matrix<T, 3, 1> n1 = (v1 - v0).cross(v2 - v0);
//     const Eigen::Matrix<T, 3, 1> n2 = (v2 - v3).cross(v1 - v3);
//     if (n2.cross(n1).dot(v1 - v2) < 0) {
//       Hess = -Hess;
//     }
// }

template <class T >
void Compute_mHat(
    const Eigen::Matrix<T, 3, 1>& xp,
    const Eigen::Matrix<T, 3, 1>& xe0,
    const Eigen::Matrix<T, 3, 1>& xe1,
    Eigen::Matrix<T, 3, 1>& mHat)
{
  Eigen::Matrix<T, 3, 1> e = xe1 - xe0;
  mHat = (xe0 + (xp - xe0).dot(e) / e.squaredNorm() * e - xp).normalized();
}

template <class T>
void Compute_Dihedral_Angle_Hessian(
    const Eigen::Matrix<T, 3, 1>& v2,
    const Eigen::Matrix<T, 3, 1>& v0,
    const Eigen::Matrix<T, 3, 1>& v1,
    const Eigen::Matrix<T, 3, 1>& v3,
    Eigen::Matrix<T, 12, 12>& Hess)
{
    Eigen::Matrix<T, 3, 1> e[5] = {
      v1 - v0, v2 - v0, v3 - v0, v2 - v1, v3 - v1
    };
    T norm_e[5] = {
      e[0].norm(),
      e[1].norm(),
      e[2].norm(),
      e[3].norm(),
      e[4].norm(),
    };

    Eigen::Matrix<T, 3, 1> n1 = e[0].cross(e[1]);
    Eigen::Matrix<T, 3, 1> n2 = e[2].cross(e[0]);
    T n1norm = n1.norm();
    T n2norm = n2.norm();

    Eigen::Matrix<T, 3, 1> mHat1, mHat2, mHat3, mHat4, mHat01, mHat02;
    Compute_mHat(v1, v0, v2, mHat1);
    Compute_mHat(v1, v0, v3, mHat2);
    Compute_mHat(v0, v1, v2, mHat3);
    Compute_mHat(v0, v1, v3, mHat4);
    Compute_mHat(v2, v0, v1, mHat01);
    Compute_mHat(v3, v0, v1, mHat02);

    T cosalpha1, cosalpha2, cosalpha3, cosalpha4;
    cosalpha1 = e[0].dot(e[1]) / (norm_e[0] * norm_e[1]);
    cosalpha2 = e[0].dot(e[2]) / (norm_e[0] * norm_e[2]);
    cosalpha3 = -e[0].dot(e[3]) / (norm_e[0] * norm_e[3]);
    cosalpha4 = -e[0].dot(e[4]) / (norm_e[0] * norm_e[4]);

    T h1, h2, h3, h4, h01, h02;
    h1 = n1norm / norm_e[1];
    h2 = n2norm / norm_e[2];
    h3 = n1norm / norm_e[3];
    h4 = n2norm / norm_e[4];
    h01 = n1norm / norm_e[0];
    h02 = n2norm / norm_e[0];

    //TODO: can extract to functions
    Eigen::Matrix<T, 3, 3> N1_01 = n1 * (mHat01.transpose() / (h01 * h01 * n1norm));
    Eigen::Matrix<T, 3, 3> N1_3 = n1 * (mHat3.transpose() / (h01 * h3 * n1norm));
    Eigen::Matrix<T, 3, 3> N1_1 = n1 * (mHat1.transpose() / (h01 * h1 * n1norm));
    Eigen::Matrix<T, 3, 3> N2_4 = n2 * (mHat4.transpose() / (h02 * h4 * n2norm));
    Eigen::Matrix<T, 3, 3> N2_2 = n2 * (mHat2.transpose() / (h02 * h2 * n2norm));
    Eigen::Matrix<T, 3, 3> N2_02 = n2 * (mHat02.transpose() / (h02 * h02 * n2norm));
    Eigen::Matrix<T, 3, 3> M3_01_1 = (cosalpha3 / (h3 * h01 * n1norm) * mHat01) * n1.transpose();
    Eigen::Matrix<T, 3, 3> M1_01_1 = (cosalpha1 / (h1 * h01 * n1norm) * mHat01) * n1.transpose();
    Eigen::Matrix<T, 3, 3> M1_1_1 = (cosalpha1 / (h1 * h1 * n1norm) * mHat1) * n1.transpose();
    Eigen::Matrix<T, 3, 3> M3_3_1 = (cosalpha3 / (h3 * h3 * n1norm) * mHat3) * n1.transpose();
    Eigen::Matrix<T, 3, 3> M3_1_1 = (cosalpha3 / (h3 * h1 * n1norm) * mHat1) * n1.transpose();
    Eigen::Matrix<T, 3, 3> M1_3_1 = (cosalpha1 / (h1 * h3 * n1norm) * mHat3) * n1.transpose();
    Eigen::Matrix<T, 3, 3> M4_02_2 = (cosalpha4 / (h4 * h02 * n2norm) * mHat02) * n2.transpose();
    Eigen::Matrix<T, 3, 3> M2_02_2 = (cosalpha2 / (h2 * h02 * n2norm) * mHat02) * n2.transpose();
    Eigen::Matrix<T, 3, 3> M4_4_2 = (cosalpha4 / (h4 * h4 * n2norm) * mHat4) * n2.transpose();
    Eigen::Matrix<T, 3, 3> M2_4_2 = (cosalpha2 / (h2 * h4 * n2norm) * mHat4) * n2.transpose();
    Eigen::Matrix<T, 3, 3> M4_2_2 = (cosalpha4 / (h4 * h2 * n2norm) * mHat2) * n2.transpose();
    Eigen::Matrix<T, 3, 3> M2_2_2 = (cosalpha2 / (h2 * h2 * n2norm) * mHat2) * n2.transpose();
    Eigen::Matrix<T, 3, 3> B1 = n1 * (mHat01.transpose() / (norm_e[0] * norm_e[0] * n1norm));
    Eigen::Matrix<T, 3, 3> B2 = n2 * (mHat02.transpose() / (norm_e[0] * norm_e[0] * n2norm));

    // fill in Hessiann in order with g2, g0, g1, g3 in rusmus' doc
    Hess.template block<3, 3>(0, 0) = -(N1_01 + N1_01.transpose());
    Hess.template block<3, 3>(3, 0) = M3_01_1 - N1_3;
    Hess.template block<3, 3>(0, 3) = Hess.template block<3, 3>(3, 0).transpose();
    Hess.template block<3, 3>(6, 0) = M1_01_1 - N1_1;
    Hess.template block<3, 3>(0, 6) = Hess.template block<3, 3>(6, 0).transpose();
    Hess.template block<3, 3>(0, 9).setZero();
    Hess.template block<3, 3>(9, 0).setZero();

    Hess.template block<3, 3>(3, 3) = M3_3_1 + M3_3_1.transpose() - B1 + M4_4_2 + M4_4_2.transpose() - B2;
    Hess.template block<3, 3>(3, 6) = M3_1_1 + M1_3_1.transpose() + B1 + M4_2_2 + M2_4_2.transpose() + B2;
    Hess.template block<3, 3>(6, 3) = Hess.template block<3, 3>(3, 6).transpose();
    Hess.template block<3, 3>(3, 9) = M4_02_2 - N2_4;
    Hess.template block<3, 3>(9, 3) = Hess.template block<3, 3>(3, 9).transpose();

    Hess.template block<3, 3>(6, 6) = M1_1_1 + M1_1_1.transpose() - B1 + M2_2_2 + M2_2_2.transpose() - B2;
    Hess.template block<3, 3>(6, 9) = M2_02_2 - N2_2;
    Hess.template block<3, 3>(9, 6) = Hess.template block<3, 3>(6, 9).transpose();

    Hess.template block<3, 3>(9, 9) = -(N2_02 + N2_02.transpose());
}

}